import java.nio.charset.StandardCharsets
import groovy.json.JsonSlurper


//Reading the Values from the Properties File
Properties props = new Properties()
File propsFile = new File('C:/Users/admin/Documents/PBCSDetails.properties')
props.load(propsFile.newDataInputStream())

serverUrl=props.getProperty('serverUrl')
domain=props.getProperty('domain')
username=props.getProperty('username')
password=props.getProperty('password')
interopUrl=props.getProperty('interopUrl') 
InteropApiVersion="11.1.2.3.600";

userCredentials = username + ":" + password;
basicAuth = "Basic " + javax.xml.bind.DatatypeConverter.printBase64Binary(userCredentials.getBytes())

def getResponse(is) {
	BufferedReader br = new BufferedReader(new InputStreamReader(is));
	StringBuilder sb = new StringBuilder();
	String line;
	while ((line = br.readLine()) != null) {
		sb.append(line+"\n");
	}
	br.close();
	return sb.toString();
}

def getUrlFromResponse(scenario, response, relValue) {
	def object = new JsonSlurper().parseText(response)
	def pingUrlStr
	if (object.status == -1) {
		println "Started - " + scenario
		def links = object.links
		links.each{
			if (it.rel.equals(relValue)) {
				pingUrlStr=it.href
			}
		}
	} else {
		println "Error details: " + object.details
		System.exit(0);
	}
	return pingUrlStr
}

def getJobStatus(pingUrlString, methodType) {

	def pingUrl = new URL(pingUrlString);
	def completed = false;
	while (!completed) {
		pingResponse = executeRequest(pingUrl, methodType, null, "application/x-www-form-urlencoded");
		status = getJobStatusFromResponse(pingResponse);
		if (status == "Processing") {
			try {
				println "Processing. Please wait..." 
				Thread.sleep(5000);
			} catch (InterruptedException e) {
				completed = true
			}
		} else {
			println status +"\n"
			completed = true
		}
	}
}

def getJobStatusFromResponse(response) {
	def object = new JsonSlurper().parseText(response)
	def status = object.status
	if (status == -1)
		return "Processing"
	else if (status == 0)
		return "Completed"
	else
		return object.details
}

def getJobDetailsFromResponse(response) {
	def object = new JsonSlurper().parseText(response)
	def details = object.details
	if (details != null)
		return object.details
	else
		return null
}

def executeRequest(url, requestType, payload, contentType) {
	HttpURLConnection connection = (HttpURLConnection) url.openConnection();
	connection.setDoOutput(true);
	connection.setInstanceFollowRedirects(false);
	connection.setRequestMethod(requestType);
	connection.setRequestProperty("Content-Type", contentType);
	//           connection.setRequestProperty("charset", StandardCharsets.UTF_8);
	connection.setRequestProperty("Authorization", basicAuth);
	connection.setUseCaches(false);

	if (payload != null) {
		OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream());
		writer.write(payload);
		writer.flush();
	}

	int statusCode
	try {
		statusCode = connection.responseCode;
	} catch (all) {
		println "Error connecting to the URL"
		System.exit(0);
	}

	def response
	if (statusCode == 200 || statusCode == 201) {
		if (connection.getContentType() != null && !connection.getContentType().startsWith("application/json")) {
			println "Error occurred in server"
			System.exit(0)
		}
		InputStream is = connection.getInputStream();
		if (is != null)
			response = getResponse(is)
	} else {
		println "Error occurred while executing request"
		println "Response error code : " + statusCode
		InputStream is = connection.getErrorStream();
		if (is != null && connection.getContentType() != null && connection.getContentType().startsWith("application/json"))
			println getJobStatusFromResponse(getResponse(is))
		System.exit(0);
	}
	connection.disconnect();
	return response;
}

/************Run Refresh Database **************/
def RunRefreshDB() {
def url;
try {
url = new URL(serverUrl +"/HyperionPlanning/rest/v3/applications/Vision/jobs")
println "**********************************************************"
println "Executing Refresh Database"
println "Instance : " +" https://<SERVICE_NAME>-<TENANT_NAME>.<SERVICE_TYPE>.<dcX>.oraclecloud.com" +"/HyperionPlanning/rest/v3/applications/APP Name/jobs"

} catch (MalformedURLException e) {
println "Malformed URL. Please pass valid URL"
System.exit(0);
}
payLoad = '{"jobType":"CUBE_REFRESH","jobName":"RefAppl"}'
response = executeRequest(url, "POST", payLoad, "application/json");
//println response
if (response != null) {

def object = new JsonSlurper().parseText(response)
println "Job Name :" +object.jobName
println "Job ID :" +object.jobId
println "Job Status :" +object.descriptiveStatus
println "**********************************************************"
}
}

RunRefreshDB()
